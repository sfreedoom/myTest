Dump of assembler code for function print_VT():
   0x0000000100001650 <+0>:	push   %rbp
   0x0000000100001651 <+1>:	mov    %rsp,%rbp
   0x0000000100001654 <+4>:	sub    $0x260,%rsp
   0x000000010000165b <+11>:	mov    0x49ae(%rip),%rax        # 0x100006010
   0x0000000100001662 <+18>:	lea    0x425e(%rip),%rsi        # 0x1000058c7
   0x0000000100001669 <+25>:	mov    %rax,%rdi
   0x000000010000166c <+28>:	mov    %rax,-0x138(%rbp)
   0x0000000100001673 <+35>:	callq  0x100004f58
   0x0000000100001678 <+40>:	mov    %rax,-0xc8(%rbp)
   0x000000010000167f <+47>:	lea    0x7ea(%rip),%rax        # 0x100001e70
   0x0000000100001686 <+54>:	mov    %rax,-0xd0(%rbp)
   0x000000010000168d <+61>:	mov    -0xc8(%rbp),%rdi
   0x0000000100001694 <+68>:	callq  *%rax
   0x0000000100001696 <+70>:	movq   $0x0,-0xd8(%rbp)
   0x00000001000016a1 <+81>:	movq   $0x0,-0xe0(%rbp)
   0x00000001000016ac <+92>:	lea    -0x110(%rbp),%rdi
   0x00000001000016b3 <+99>:	mov    %rax,-0x140(%rbp)
   0x00000001000016ba <+106>:	callq  0x100004e8c
   0x00000001000016bf <+111>:	movl   $0x30,-0x114(%rbp)
   0x00000001000016c9 <+121>:	lea    0x422e(%rip),%rsi        # 0x1000058fe
=> 0x00000001000016d0 <+128>:	mov    -0x138(%rbp),%rdi
   0x00000001000016d7 <+135>:	callq  0x100004f58
   0x00000001000016dc <+140>:	mov    %rax,-0x148(%rbp)
   0x00000001000016e3 <+147>:	jmpq   0x1000016e8 <print_VT()+152>
   0x00000001000016e8 <+152>:	mov    -0x114(%rbp),%esi
   0x00000001000016ee <+158>:	mov    -0x148(%rbp),%rdi
   0x00000001000016f5 <+165>:	callq  0x100004fd0
   0x00000001000016fa <+170>:	mov    %rax,-0x150(%rbp)
   0x0000000100001701 <+177>:	jmpq   0x100001706 <print_VT()+182>
   0x0000000100001706 <+182>:	mov    -0x150(%rbp),%rax
   0x000000010000170d <+189>:	mov    %rax,-0xb8(%rbp)
   0x0000000100001714 <+196>:	lea    0x755(%rip),%rcx        # 0x100001e70
   0x000000010000171b <+203>:	mov    %rcx,-0xc0(%rbp)
   0x0000000100001722 <+210>:	mov    -0xb8(%rbp),%rdi
   0x0000000100001729 <+217>:	callq  *%rcx
   0x000000010000172b <+219>:	mov    %rax,-0x158(%rbp)
   0x0000000100001732 <+226>:	jmpq   0x100001737 <print_VT()+231>
   0x0000000100001737 <+231>:	jmpq   0x10000173c <print_VT()+236>
   0x000000010000173c <+236>:	mov    0x48cd(%rip),%rdi        # 0x100006010
   0x0000000100001743 <+243>:	lea    0x41c1(%rip),%rsi        # 0x10000590b
   0x000000010000174a <+250>:	callq  0x100004f58
   0x000000010000174f <+255>:	mov    %rax,-0x160(%rbp)
   0x0000000100001756 <+262>:	jmpq   0x10000175b <print_VT()+267>
   0x000000010000175b <+267>:	lea    -0x110(%rbp),%rsi
   0x0000000100001762 <+274>:	mov    -0x160(%rbp),%rdi
   0x0000000100001769 <+281>:	callq  0x100004fca
   0x000000010000176e <+286>:	mov    %rax,-0x168(%rbp)
   0x0000000100001775 <+293>:	jmpq   0x10000177a <print_VT()+298>
   0x000000010000177a <+298>:	mov    -0x168(%rbp),%rax
   0x0000000100001781 <+305>:	mov    %rax,-0xa8(%rbp)
   0x0000000100001788 <+312>:	lea    0x6e1(%rip),%rcx        # 0x100001e70
   0x000000010000178f <+319>:	mov    %rcx,-0xb0(%rbp)
   0x0000000100001796 <+326>:	mov    -0xa8(%rbp),%rdi
   0x000000010000179d <+333>:	callq  *%rcx
   0x000000010000179f <+335>:	mov    %rax,-0x170(%rbp)
   0x00000001000017a6 <+342>:	jmpq   0x1000017ab <print_VT()+347>
   0x00000001000017ab <+347>:	jmpq   0x1000017b0 <print_VT()+352>
   0x00000001000017b0 <+352>:	mov    0x4859(%rip),%rdi        # 0x100006010
   0x00000001000017b7 <+359>:	lea    0x4165(%rip),%rsi        # 0x100005923
   0x00000001000017be <+366>:	callq  0x100004f58
   0x00000001000017c3 <+371>:	mov    %rax,-0x178(%rbp)
   0x00000001000017ca <+378>:	jmpq   0x1000017cf <print_VT()+383>
   0x00000001000017cf <+383>:	mov    -0x110(%rbp),%rsi
   0x00000001000017d6 <+390>:	mov    -0x178(%rbp),%rdi
   0x00000001000017dd <+397>:	callq  0x100004fca
   0x00000001000017e2 <+402>:	mov    %rax,-0x180(%rbp)
   0x00000001000017e9 <+409>:	jmpq   0x1000017ee <print_VT()+414>
   0x00000001000017ee <+414>:	mov    -0x180(%rbp),%rax
   0x00000001000017f5 <+421>:	mov    %rax,-0x98(%rbp)
   0x00000001000017fc <+428>:	lea    0x66d(%rip),%rcx        # 0x100001e70
   0x0000000100001803 <+435>:	mov    %rcx,-0xa0(%rbp)
   0x000000010000180a <+442>:	mov    -0x98(%rbp),%rdi
   0x0000000100001811 <+449>:	callq  *%rcx
   0x0000000100001813 <+451>:	mov    %rax,-0x188(%rbp)
   0x000000010000181a <+458>:	jmpq   0x10000181f <print_VT()+463>
   0x000000010000181f <+463>:	jmpq   0x100001824 <print_VT()+468>
   0x0000000100001824 <+468>:	mov    0x47e5(%rip),%rdi        # 0x100006010
   0x000000010000182b <+475>:	lea    0x4110(%rip),%rsi        # 0x100005942
   0x0000000100001832 <+482>:	callq  0x100004f58
   0x0000000100001837 <+487>:	mov    %rax,-0x190(%rbp)
   0x000000010000183e <+494>:	jmpq   0x100001843 <print_VT()+499>
   0x0000000100001843 <+499>:	mov    -0x190(%rbp),%rax
   0x000000010000184a <+506>:	mov    %rax,-0x88(%rbp)
   0x0000000100001851 <+513>:	lea    0x618(%rip),%rcx        # 0x100001e70
   0x0000000100001858 <+520>:	mov    %rcx,-0x90(%rbp)
   0x000000010000185f <+527>:	mov    -0x88(%rbp),%rdi
   0x0000000100001866 <+534>:	callq  *%rcx
   0x0000000100001868 <+536>:	mov    %rax,-0x198(%rbp)
   0x000000010000186f <+543>:	jmpq   0x100001874 <print_VT()+548>
   0x0000000100001874 <+548>:	jmpq   0x100001879 <print_VT()+553>
   0x0000000100001879 <+553>:	mov    -0x110(%rbp),%rax
   0x0000000100001880 <+560>:	mov    (%rax),%rax
   0x0000000100001883 <+563>:	mov    %rax,-0xd8(%rbp)
   0x000000010000188a <+570>:	callq  *%rax
   0x000000010000188c <+572>:	jmpq   0x100001891 <print_VT()+577>
   0x0000000100001891 <+577>:	mov    -0x110(%rbp),%rax
   0x0000000100001898 <+584>:	mov    0x8(%rax),%rax
   0x000000010000189c <+588>:	mov    %rax,-0xd8(%rbp)
   0x00000001000018a3 <+595>:	callq  *%rax
   0x00000001000018a5 <+597>:	jmpq   0x1000018aa <print_VT()+602>
   0x00000001000018aa <+602>:	mov    -0x110(%rbp),%rax
   0x00000001000018b1 <+609>:	mov    0x10(%rax),%rax
   0x00000001000018b5 <+613>:	mov    %rax,-0xe0(%rbp)
   0x00000001000018bc <+620>:	mov    $0x43,%edi
   0x00000001000018c1 <+625>:	callq  *%rax
   0x00000001000018c3 <+627>:	mov    %eax,-0x19c(%rbp)
   0x00000001000018c9 <+633>:	jmpq   0x1000018ce <print_VT()+638>
   0x00000001000018ce <+638>:	mov    -0x19c(%rbp),%eax
   0x00000001000018d4 <+644>:	mov    %eax,-0x114(%rbp)
   0x00000001000018da <+650>:	mov    0x472f(%rip),%rdi        # 0x100006010
   0x00000001000018e1 <+657>:	lea    0x4064(%rip),%rsi        # 0x10000594c
   0x00000001000018e8 <+664>:	callq  0x100004f58
   0x00000001000018ed <+669>:	mov    %rax,-0x1a8(%rbp)
   0x00000001000018f4 <+676>:	jmpq   0x1000018f9 <print_VT()+681>
   0x00000001000018f9 <+681>:	mov    -0x114(%rbp),%esi
   0x00000001000018ff <+687>:	mov    -0x1a8(%rbp),%rdi
   0x0000000100001906 <+694>:	callq  0x100004fd0
   0x000000010000190b <+699>:	mov    %rax,-0x1b0(%rbp)
   0x0000000100001912 <+706>:	jmpq   0x100001917 <print_VT()+711>
   0x0000000100001917 <+711>:	mov    -0x1b0(%rbp),%rax
   0x000000010000191e <+718>:	mov    %rax,-0x78(%rbp)
   0x0000000100001922 <+722>:	lea    0x547(%rip),%rcx        # 0x100001e70
   0x0000000100001929 <+729>:	mov    %rcx,-0x80(%rbp)
   0x000000010000192d <+733>:	mov    -0x78(%rbp),%rdi
   0x0000000100001931 <+737>:	callq  *%rcx
   0x0000000100001933 <+739>:	mov    %rax,-0x1b8(%rbp)
   0x000000010000193a <+746>:	jmpq   0x10000193f <print_VT()+751>
   0x000000010000193f <+751>:	jmpq   0x100001944 <print_VT()+756>
   0x0000000100001944 <+756>:	mov    0x46c5(%rip),%rdi        # 0x100006010
   0x000000010000194b <+763>:	lea    0x400d(%rip),%rsi        # 0x10000595f
   0x0000000100001952 <+770>:	callq  0x100004f58
   0x0000000100001957 <+775>:	mov    %rax,-0x1c0(%rbp)
   0x000000010000195e <+782>:	jmpq   0x100001963 <print_VT()+787>
   0x0000000100001963 <+787>:	mov    -0x1c0(%rbp),%rax
   0x000000010000196a <+794>:	mov    %rax,-0x68(%rbp)
   0x000000010000196e <+798>:	lea    0x4fb(%rip),%rcx        # 0x100001e70
   0x0000000100001975 <+805>:	mov    %rcx,-0x70(%rbp)
   0x0000000100001979 <+809>:	mov    -0x68(%rbp),%rdi
   0x000000010000197d <+813>:	callq  *%rcx
   0x000000010000197f <+815>:	mov    %rax,-0x1c8(%rbp)
   0x0000000100001986 <+822>:	jmpq   0x10000198b <print_VT()+827>
   0x000000010000198b <+827>:	jmpq   0x100001990 <print_VT()+832>
   0x0000000100001990 <+832>:	mov    -0x108(%rbp),%rax
   0x0000000100001997 <+839>:	mov    (%rax),%rax
   0x000000010000199a <+842>:	mov    %rax,-0xd8(%rbp)
   0x00000001000019a1 <+849>:	callq  *%rax
   0x00000001000019a3 <+851>:	jmpq   0x1000019a8 <print_VT()+856>
   0x00000001000019a8 <+856>:	mov    -0x108(%rbp),%rax
   0x00000001000019af <+863>:	mov    0x8(%rax),%rax
   0x00000001000019b3 <+867>:	mov    %rax,-0xd8(%rbp)
   0x00000001000019ba <+874>:	callq  *%rax
   0x00000001000019bc <+876>:	jmpq   0x1000019c1 <print_VT()+881>
   0x00000001000019c1 <+881>:	mov    -0x108(%rbp),%rax
   0x00000001000019c8 <+888>:	mov    0x10(%rax),%rax
   0x00000001000019cc <+892>:	mov    %rax,-0xe0(%rbp)
   0x00000001000019d3 <+899>:	mov    $0x8,%edi
   0x00000001000019d8 <+904>:	callq  *%rax
   0x00000001000019da <+906>:	mov    %eax,-0x1cc(%rbp)
   0x00000001000019e0 <+912>:	jmpq   0x1000019e5 <print_VT()+917>
   0x00000001000019e5 <+917>:	mov    -0x1cc(%rbp),%eax
   0x00000001000019eb <+923>:	mov    %eax,-0x114(%rbp)
   0x00000001000019f1 <+929>:	mov    0x4618(%rip),%rdi        # 0x100006010
   0x00000001000019f8 <+936>:	lea    0x3f6a(%rip),%rsi        # 0x100005969
   0x00000001000019ff <+943>:	callq  0x100004f58
   0x0000000100001a04 <+948>:	mov    %rax,-0x1d8(%rbp)
   0x0000000100001a0b <+955>:	jmpq   0x100001a10 <print_VT()+960>
   0x0000000100001a10 <+960>:	mov    -0x114(%rbp),%esi
   0x0000000100001a16 <+966>:	mov    -0x1d8(%rbp),%rdi
   0x0000000100001a1d <+973>:	callq  0x100004fd0
   0x0000000100001a22 <+978>:	mov    %rax,-0x1e0(%rbp)
   0x0000000100001a29 <+985>:	jmpq   0x100001a2e <print_VT()+990>
   0x0000000100001a2e <+990>:	mov    -0x1e0(%rbp),%rax
   0x0000000100001a35 <+997>:	mov    %rax,-0x58(%rbp)
   0x0000000100001a39 <+1001>:	lea    0x430(%rip),%rcx        # 0x100001e70
   0x0000000100001a40 <+1008>:	mov    %rcx,-0x60(%rbp)
   0x0000000100001a44 <+1012>:	mov    -0x58(%rbp),%rdi
   0x0000000100001a48 <+1016>:	callq  *%rcx
   0x0000000100001a4a <+1018>:	mov    %rax,-0x1e8(%rbp)
   0x0000000100001a51 <+1025>:	jmpq   0x100001a56 <print_VT()+1030>
   0x0000000100001a56 <+1030>:	jmpq   0x100001a5b <print_VT()+1035>
   0x0000000100001a5b <+1035>:	mov    0x45ae(%rip),%rdi        # 0x100006010
   0x0000000100001a62 <+1042>:	lea    0x3f13(%rip),%rsi        # 0x10000597c
   0x0000000100001a69 <+1049>:	callq  0x100004f58
   0x0000000100001a6e <+1054>:	mov    %rax,-0x1f0(%rbp)
   0x0000000100001a75 <+1061>:	jmpq   0x100001a7a <print_VT()+1066>
   0x0000000100001a7a <+1066>:	mov    -0x1f0(%rbp),%rax
   0x0000000100001a81 <+1073>:	mov    %rax,-0x48(%rbp)
   0x0000000100001a85 <+1077>:	lea    0x3e4(%rip),%rcx        # 0x100001e70
   0x0000000100001a8c <+1084>:	mov    %rcx,-0x50(%rbp)
   0x0000000100001a90 <+1088>:	mov    -0x48(%rbp),%rdi
   0x0000000100001a94 <+1092>:	callq  *%rcx
   0x0000000100001a96 <+1094>:	mov    %rax,-0x1f8(%rbp)
   0x0000000100001a9d <+1101>:	jmpq   0x100001aa2 <print_VT()+1106>
   0x0000000100001aa2 <+1106>:	jmpq   0x100001aa7 <print_VT()+1111>
   0x0000000100001aa7 <+1111>:	mov    -0x100(%rbp),%rax
   0x0000000100001aae <+1118>:	mov    (%rax),%rax
   0x0000000100001ab1 <+1121>:	mov    %rax,-0xd8(%rbp)
   0x0000000100001ab8 <+1128>:	callq  *%rax
   0x0000000100001aba <+1130>:	jmpq   0x100001abf <print_VT()+1135>
   0x0000000100001abf <+1135>:	mov    -0x100(%rbp),%rax
   0x0000000100001ac6 <+1142>:	mov    0x8(%rax),%rax
   0x0000000100001aca <+1146>:	mov    %rax,-0xd8(%rbp)
   0x0000000100001ad1 <+1153>:	callq  *%rax
   0x0000000100001ad3 <+1155>:	jmpq   0x100001ad8 <print_VT()+1160>
   0x0000000100001ad8 <+1160>:	mov    -0x100(%rbp),%rax
   0x0000000100001adf <+1167>:	mov    0x10(%rax),%rax
   0x0000000100001ae3 <+1171>:	mov    %rax,-0xd8(%rbp)
   0x0000000100001aea <+1178>:	callq  *%rax
   0x0000000100001aec <+1180>:	jmpq   0x100001af1 <print_VT()+1185>
   0x0000000100001af1 <+1185>:	mov    0x4518(%rip),%rdi        # 0x100006010
   0x0000000100001af8 <+1192>:	lea    0x3e87(%rip),%rsi        # 0x100005986
   0x0000000100001aff <+1199>:	callq  0x100004f58
   0x0000000100001b04 <+1204>:	mov    %rax,-0x200(%rbp)
   0x0000000100001b0b <+1211>:	jmpq   0x100001b10 <print_VT()+1216>
   0x0000000100001b10 <+1216>:	mov    -0x200(%rbp),%rax
   0x0000000100001b17 <+1223>:	mov    %rax,-0x38(%rbp)
   0x0000000100001b1b <+1227>:	lea    0x34e(%rip),%rcx        # 0x100001e70
   0x0000000100001b22 <+1234>:	mov    %rcx,-0x40(%rbp)
   0x0000000100001b26 <+1238>:	mov    -0x38(%rbp),%rdi
   0x0000000100001b2a <+1242>:	callq  *%rcx
   0x0000000100001b2c <+1244>:	mov    %rax,-0x208(%rbp)
   0x0000000100001b33 <+1251>:	jmpq   0x100001b38 <print_VT()+1256>
   0x0000000100001b38 <+1256>:	jmpq   0x100001b3d <print_VT()+1261>
   0x0000000100001b3d <+1261>:	mov    -0xf8(%rbp),%rax
   0x0000000100001b44 <+1268>:	mov    (%rax),%rax
   0x0000000100001b47 <+1271>:	mov    %rax,-0xd8(%rbp)
   0x0000000100001b4e <+1278>:	callq  *%rax
   0x0000000100001b50 <+1280>:	jmpq   0x100001b55 <print_VT()+1285>
   0x0000000100001b55 <+1285>:	mov    -0xf8(%rbp),%rax
   0x0000000100001b5c <+1292>:	mov    0x8(%rax),%rax
   0x0000000100001b60 <+1296>:	mov    %rax,-0xd8(%rbp)
   0x0000000100001b67 <+1303>:	callq  *%rax
   0x0000000100001b69 <+1305>:	jmpq   0x100001b6e <print_VT()+1310>
   0x0000000100001b6e <+1310>:	mov    -0xf8(%rbp),%rax
   0x0000000100001b75 <+1317>:	mov    0x10(%rax),%rax
   0x0000000100001b79 <+1321>:	mov    %rax,-0xe0(%rbp)
   0x0000000100001b80 <+1328>:	mov    $0x45,%edi
   0x0000000100001b85 <+1333>:	callq  *%rax
   0x0000000100001b87 <+1335>:	mov    %eax,-0x20c(%rbp)
   0x0000000100001b8d <+1341>:	jmpq   0x100001b92 <print_VT()+1346>
   0x0000000100001b92 <+1346>:	mov    -0x20c(%rbp),%eax
   0x0000000100001b98 <+1352>:	mov    %eax,-0x114(%rbp)
   0x0000000100001b9e <+1358>:	mov    0x446b(%rip),%rdi        # 0x100006010
   0x0000000100001ba5 <+1365>:	lea    0x3de4(%rip),%rsi        # 0x100005990
   0x0000000100001bac <+1372>:	callq  0x100004f58
   0x0000000100001bb1 <+1377>:	mov    %rax,-0x218(%rbp)
   0x0000000100001bb8 <+1384>:	jmpq   0x100001bbd <print_VT()+1389>
   0x0000000100001bbd <+1389>:	mov    -0x114(%rbp),%esi
   0x0000000100001bc3 <+1395>:	mov    -0x218(%rbp),%rdi
   0x0000000100001bca <+1402>:	callq  0x100004fd0
   0x0000000100001bcf <+1407>:	mov    %rax,-0x220(%rbp)
   0x0000000100001bd6 <+1414>:	jmpq   0x100001bdb <print_VT()+1419>
   0x0000000100001bdb <+1419>:	mov    -0x220(%rbp),%rax
   0x0000000100001be2 <+1426>:	mov    %rax,-0x28(%rbp)
   0x0000000100001be6 <+1430>:	lea    0x283(%rip),%rcx        # 0x100001e70
   0x0000000100001bed <+1437>:	mov    %rcx,-0x30(%rbp)
   0x0000000100001bf1 <+1441>:	mov    -0x28(%rbp),%rdi
   0x0000000100001bf5 <+1445>:	callq  *%rcx
   0x0000000100001bf7 <+1447>:	mov    %rax,-0x228(%rbp)
   0x0000000100001bfe <+1454>:	jmpq   0x100001c03 <print_VT()+1459>
   0x0000000100001c03 <+1459>:	jmpq   0x100001c08 <print_VT()+1464>
   0x0000000100001c08 <+1464>:	mov    0x4401(%rip),%rdi        # 0x100006010
   0x0000000100001c0f <+1471>:	lea    0x3d89(%rip),%rsi        # 0x10000599f
   0x0000000100001c16 <+1478>:	callq  0x100004f58
   0x0000000100001c1b <+1483>:	mov    %rax,-0x230(%rbp)
   0x0000000100001c22 <+1490>:	jmpq   0x100001c27 <print_VT()+1495>
   0x0000000100001c27 <+1495>:	mov    -0x230(%rbp),%rax
   0x0000000100001c2e <+1502>:	mov    %rax,-0x18(%rbp)
   0x0000000100001c32 <+1506>:	lea    0x237(%rip),%rcx        # 0x100001e70
   0x0000000100001c39 <+1513>:	mov    %rcx,-0x20(%rbp)
   0x0000000100001c3d <+1517>:	mov    -0x18(%rbp),%rdi
   0x0000000100001c41 <+1521>:	callq  *%rcx
   0x0000000100001c43 <+1523>:	mov    %rax,-0x238(%rbp)
   0x0000000100001c4a <+1530>:	jmpq   0x100001c4f <print_VT()+1535>
   0x0000000100001c4f <+1535>:	jmpq   0x100001c54 <print_VT()+1540>
   0x0000000100001c54 <+1540>:	mov    -0xf0(%rbp),%rax
   0x0000000100001c5b <+1547>:	mov    (%rax),%rax
   0x0000000100001c5e <+1550>:	mov    %rax,-0xd8(%rbp)
   0x0000000100001c65 <+1557>:	callq  *%rax
   0x0000000100001c67 <+1559>:	jmpq   0x100001c6c <print_VT()+1564>
   0x0000000100001c6c <+1564>:	mov    -0xf0(%rbp),%rax
   0x0000000100001c73 <+1571>:	mov    0x8(%rax),%rax
   0x0000000100001c77 <+1575>:	mov    %rax,-0xd8(%rbp)
   0x0000000100001c7e <+1582>:	callq  *%rax
   0x0000000100001c80 <+1584>:	jmpq   0x100001c85 <print_VT()+1589>
   0x0000000100001c85 <+1589>:	mov    -0xf0(%rbp),%rax
   0x0000000100001c8c <+1596>:	mov    0x10(%rax),%rax
   0x0000000100001c90 <+1600>:	mov    %rax,-0xd8(%rbp)
   0x0000000100001c97 <+1607>:	callq  *%rax
   0x0000000100001c99 <+1609>:	jmpq   0x100001c9e <print_VT()+1614>
   0x0000000100001c9e <+1614>:	mov    0x436b(%rip),%rdi        # 0x100006010
   0x0000000100001ca5 <+1621>:	lea    0x3cfd(%rip),%rsi        # 0x1000059a9
   0x0000000100001cac <+1628>:	callq  0x100004f58
   0x0000000100001cb1 <+1633>:	mov    %rax,-0x240(%rbp)
   0x0000000100001cb8 <+1640>:	jmpq   0x100001cbd <print_VT()+1645>
   0x0000000100001cbd <+1645>:	mov    -0x240(%rbp),%rax
   0x0000000100001cc4 <+1652>:	mov    %rax,-0x8(%rbp)
   0x0000000100001cc8 <+1656>:	lea    0x1a1(%rip),%rcx        # 0x100001e70
   0x0000000100001ccf <+1663>:	mov    %rcx,-0x10(%rbp)
   0x0000000100001cd3 <+1667>:	mov    -0x8(%rbp),%rdi
   0x0000000100001cd7 <+1671>:	callq  *%rcx
   0x0000000100001cd9 <+1673>:	mov    %rax,-0x248(%rbp)
   0x0000000100001ce0 <+1680>:	jmpq   0x100001ce5 <print_VT()+1685>
   0x0000000100001ce5 <+1685>:	jmpq   0x100001cea <print_VT()+1690>
   0x0000000100001cea <+1690>:	mov    -0xe8(%rbp),%rax
   0x0000000100001cf1 <+1697>:	mov    (%rax),%rax
   0x0000000100001cf4 <+1700>:	mov    %rax,-0xd8(%rbp)
   0x0000000100001cfb <+1707>:	callq  *%rax
   0x0000000100001cfd <+1709>:	jmpq   0x100001d02 <print_VT()+1714>
   0x0000000100001d02 <+1714>:	mov    -0xe8(%rbp),%rax
   0x0000000100001d09 <+1721>:	mov    0x8(%rax),%rax
   0x0000000100001d0d <+1725>:	mov    %rax,-0xd8(%rbp)
   0x0000000100001d14 <+1732>:	callq  *%rax
   0x0000000100001d16 <+1734>:	jmpq   0x100001d1b <print_VT()+1739>
   0x0000000100001d1b <+1739>:	mov    -0xe8(%rbp),%rax
   0x0000000100001d22 <+1746>:	mov    0x10(%rax),%rax
   0x0000000100001d26 <+1750>:	mov    %rax,-0xd8(%rbp)
   0x0000000100001d2d <+1757>:	callq  *%rax
   0x0000000100001d2f <+1759>:	jmpq   0x100001d34 <print_VT()+1764>
   0x0000000100001d34 <+1764>:	mov    -0xe8(%rbp),%rax
   0x0000000100001d3b <+1771>:	mov    0x18(%rax),%rax
   0x0000000100001d3f <+1775>:	mov    %rax,-0xd8(%rbp)
   0x0000000100001d46 <+1782>:	callq  *%rax
   0x0000000100001d48 <+1784>:	jmpq   0x100001d4d <print_VT()+1789>
   0x0000000100001d4d <+1789>:	movabs $0x0,%rax
   0x0000000100001d57 <+1799>:	lea    -0x110(%rbp),%rcx
   0x0000000100001d5e <+1806>:	cmp    $0x0,%rcx
   0x0000000100001d65 <+1813>:	mov    %rax,-0x250(%rbp)
   0x0000000100001d6c <+1820>:	je     0x100001d86 <print_VT()+1846>
   0x0000000100001d72 <+1826>:	lea    -0x110(%rbp),%rax
   0x0000000100001d79 <+1833>:	add    $0x18,%rax
   0x0000000100001d7f <+1839>:	mov    %rax,-0x250(%rbp)
   0x0000000100001d86 <+1846>:	mov    -0x250(%rbp),%rax
   0x0000000100001d8d <+1853>:	lea    -0x110(%rbp),%rdi
   0x0000000100001d94 <+1860>:	mov    %rax,-0x130(%rbp)
   0x0000000100001d9b <+1867>:	callq  0x100004e9e
   0x0000000100001da0 <+1872>:	add    $0x260,%rsp
   0x0000000100001da7 <+1879>:	pop    %rbp
   0x0000000100001da8 <+1880>:	retq   
   0x0000000100001da9 <+1881>:	mov    %edx,%ecx
   0x0000000100001dab <+1883>:	mov    %rax,-0x120(%rbp)
   0x0000000100001db2 <+1890>:	mov    %ecx,-0x124(%rbp)
   0x0000000100001db8 <+1896>:	lea    -0x110(%rbp),%rdi
   0x0000000100001dbf <+1903>:	callq  0x100004e9e
   0x0000000100001dc4 <+1908>:	jmpq   0x100001dc9 <print_VT()+1913>
   0x0000000100001dc9 <+1913>:	jmpq   0x100001dce <print_VT()+1918>
   0x0000000100001dce <+1918>:	mov    -0x120(%rbp),%rdi
   0x0000000100001dd5 <+1925>:	callq  0x10000500c
   0x0000000100001dda <+1930>:	mov    %edx,%ecx
   0x0000000100001ddc <+1932>:	mov    %rax,%rdi
   0x0000000100001ddf <+1935>:	mov    %ecx,-0x254(%rbp)
   0x0000000100001de5 <+1941>:	callq  0x100001fc0
End of assembler dump.
